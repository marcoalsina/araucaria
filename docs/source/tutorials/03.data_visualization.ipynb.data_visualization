{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Data visualization\n",
    "\n",
    "*by Morgane Desmau & Marco Alsina*\n",
    "\n",
    "*Last update: May 2021*\n",
    "\n",
    "The following notebook explains the following:\n",
    "\n",
    "1. Generation of custom plots\n",
    "\n",
    "**Important:** This tutorial assumes you have succesfully completed the previous tutorial in the series:\n",
    "- [Part 1: Basics of data processing](01.basics_data_processing.ipynb)\n",
    "- [Part 2: Normalization and background removal](02.background_removal.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Checking versions\n",
    "\n",
    "It is convenient to first check the version of `araucaria` and its dependencies. In this case we will use the [get_version()](../utils_module.rst#araucaria.utils.get_version) function.\n",
    "\n",
    "As seen in the output, this tutorial was developed with version 0.1.8. (your version could vary)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python version      : 3.9.4\n",
      "Numpy version       : 1.20.3\n",
      "Scipy version       : 1.6.3\n",
      "Lmfit version       : 1.0.2\n",
      "H5py version        : 3.2.1\n",
      "Matplotlib version  : 3.4.2\n",
      "Araucaria version   : 0.1.8\n"
     ]
    }
   ],
   "source": [
    "from araucaria.utils import get_version\n",
    "print(get_version(dependencies=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Retrieving filepath\n",
    "\n",
    "`araucaria` contains spectra from different beamlines as examples and for testing purposes.\n",
    "The [testdata](../testdata_module.rst) module offers routines to retrieve the respective filepaths.\n",
    "\n",
    "In this case we will be reading and processing a sample from a minerals database measured at the Fe K-edge in the P65 beamline of DESY, Hamburg (data kindly provided by Morgane Desmau):\n",
    "\n",
    "1. Fe_database.h5\n",
    "\n",
    "We first retrieve the filepath to the database."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "    **Note**\n",
    "    \n",
    "    If you prefer to process your own database, just modify the filepath to point to the location of your file.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# retrieving filepath\n",
    "from pathlib import Path\n",
    "from araucaria.testdata import get_testpath\n",
    "\n",
    "fpath = get_testpath('Fe_database.h5')\n",
    "\n",
    "# checking that filepath is a Path class\n",
    "isinstance(fpath, Path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Summarizing a database\n",
    "\n",
    "It is illustrative to first summarize the data contained in an `HDF5` database. Here we use the [summary_hdf5()](../io/io_hdf5.rst#araucaria.io.io_hdf5.summary_hdf5) function to produce a [Report](../main/main_report.rst#araucaria.main.report.Report) with the contents of the database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "========================================\n",
      "id  dataset                 mode    n   \n",
      "========================================\n",
      "1   FeIISO4_20K             mu      5   \n",
      "2   Fe_Foil                 mu_ref  5   \n",
      "3   Ferrihydrite_20K        mu      5   \n",
      "4   Goethite_20K            mu      5   \n",
      "5   Goethite_20K_10spectra  mu      10  \n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "# summarizing database\n",
    "from araucaria.io import summary_hdf5\n",
    "\n",
    "report = summary_hdf5(fpath)\n",
    "report.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The [read_hdf5()](../io/io_hdf5.rst#araucaria.io.io_hdf5.read_hdf5) function allows us to read a single [Group](../main/main_group.rst#araucaria.main.group.Group) from a HDF5 database.\n",
    "In this case we will read a scan of ferrous sulfate measured at 20 K."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from araucaria import Group\n",
    "from araucaria.io import read_hdf5\n",
    "\n",
    "name  = 'FeIISO4_20K'\n",
    "group = read_hdf5(fpath, name)\n",
    "\n",
    "# checking the group class\n",
    "isinstance(group, Group)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Spectrum normalization\n",
    "\n",
    "XAFS spectra is commonly normalized by setting the absorption edge step to one ($\\Delta \\mu_0 \\sim 1.0$). Such approach depends on the value of the absorption threshold ($E_0$).\n",
    "\n",
    "The [find_e0()](../xas/xas_normalize.rst#araucaria.xas.normalize.find_e0) function allows to find the absorption threshold for a single scan group:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e0 value is 7124.723 eV\n"
     ]
    }
   ],
   "source": [
    "from araucaria.xas import find_e0\n",
    "\n",
    "e0 = find_e0(group)\n",
    "print('e0 value is %1.3f eV' % e0) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the previous value to normalize the spectrum and automatically update the group with the [pre_edge()](../xas/xas_normalize.rst#araucaria.xas.normalize.pre_edge) function.\n",
    "\n",
    "Here we use a dictionary to specifiy the normalization parameters, including the pre-edge and post-edge fitting ranges, as well as the coefficients for the pre-edge Victoreen and the polynomial normalization functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "    **Note**\n",
    "    \n",
    "    We specified the upper end of the post-edge normalization function to be `inf`.\n",
    "    This value defaults to the maximum recorded energy in the scan.\n",
    "    \n",
    "    Please check the documentation of [pre_edge()](../xas/xas_normalize.rst#araucaria.xas.normalize.pre_edge) for further details.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "edge step is 0.1821 a.u.\n"
     ]
    }
   ],
   "source": [
    "from numpy import inf\n",
    "from araucaria.xas import pre_edge\n",
    "from araucaria.plot import fig_pre_edge\n",
    "\n",
    "\n",
    "# pre-edge parameters\n",
    "pre_edge_kws = {'pre_range' : [-160, -40],\n",
    "                'post_range': [150, inf],\n",
    "                'nvict'     : 2,\n",
    "                'nnorm'     : 3}\n",
    "\n",
    "pre_data = pre_edge(group, e0=e0, update=True, **pre_edge_kws)\n",
    "print('edge step is %1.4f a.u.' % group.edge_step)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we can plot the normalized spectrum with the [fig_pre_edge()](../plot_module.rst#araucaria.plot.fig_pre_edge.fig_pre_edge) function. The function accepts a dictionary of parameters for the figure, so in this case we specify the figure size with the `figsize` key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 460.8x345.6 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# figure size in inches\n",
    "fig_kws  = {'figsize' : (6.4, 4.8)} \n",
    "\n",
    "fig, ax  = fig_pre_edge(group, **fig_kws)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Background removal\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from araucaria.xas import autobk\n",
    "from araucaria.plot import fig_xas_template\n",
    "\n",
    "# autobk parameters\n",
    "autobk_kws = {'rbkg'     : 1.0,\n",
    "               'k_range' : [0, 14],\n",
    "               'kweight' : 2,\n",
    "               'win'     : 'hanning',\n",
    "               'dk'      : 0.1,\n",
    "               'nclamp'  : 2,\n",
    "               'clamp_lo': 1,\n",
    "               'clamp_hi': 1}\n",
    "\n",
    "# Background removal of XAS scans\n",
    "autbk_data = autobk(group, update=True, **autobk_kws)\n",
    "\n",
    "# Plot/Check background and EXAFS\n",
    "fig, ax = fig_xas_template(panels='xe')\n",
    "ax[0].plot(group.energy, group.mu, label='mu')\n",
    "ax[0].plot(group.energy, group.bkg, label='bkg', zorder=-1)\n",
    "ax[0].set_ylabel('Absorbance')\n",
    "ax[0].legend()\n",
    "\n",
    "ax[1].plot(group.k, group.k**2 * group.chi, label='k^2 chi')\n",
    "ax[1].legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# figure parameters\n",
    "k_edge   = 7112\n",
    "k_mult   = 2\n",
    "fig_kws  = {'figsize'  : (12, 5.0)}   \n",
    "fig_pars = {'e_range'  : (k_edge-50, k_edge+90),\n",
    "            'e_ticks'  : [k_edge-51, k_edge-3, k_edge+44, k_edge+91],\n",
    "            'dmu_range': [-0.15,0.35], #need to be adapted each time\n",
    "            'k_range'  : [-0.1,16.3],\n",
    "            'k_mult'   : k_mult,\n",
    "            'k_ticks'  : [0,2,4,6,8,10,12,14,16]\n",
    "           }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Data visualization\n",
    "\n",
    "Plot data -- first visualization -- figures to present the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "OSError",
     "evalue": "file Database_example_Fe.h5 does not exists.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-10-691153e99910>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     50\u001b[0m \u001b[1;31m# Reading data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     51\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdatnames\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'db'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 52\u001b[1;33m     \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_hdf5\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdbpath\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdatnames\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'db'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdatnames\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'names'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     53\u001b[0m     \u001b[0me0_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfind_e0\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'halfedge'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpre_edge_kws\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpre_edge_kws\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mupdate\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     54\u001b[0m     pre_edge(data, e0 = e0_data, pre_range = pre_range, post_range = post_range, \n",
      "\u001b[1;32mc:\\users\\usuario\\downloads\\araucaria\\araucaria\\io\\io_hdf5.py\u001b[0m in \u001b[0;36mread_hdf5\u001b[1;34m(fpath, name)\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mhdf5\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mFile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfpath\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"r\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 76\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mIOError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"file %s does not exists.\"\u001b[0m \u001b[1;33m%\u001b[0m \u001b[0mfpath\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     77\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     78\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mhdf5\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mOSError\u001b[0m: file Database_example_Fe.h5 does not exists."
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.signal import argrelextrema\n",
    "\n",
    "from araucaria import Report\n",
    "from araucaria.io import read_hdf5\n",
    "from araucaria.xas import find_e0, pre_edge, autobk, xftf\n",
    "from araucaria.plot import fig_xas_template, fig_pre_edge\n",
    "\n",
    "# Path to the files that contain the reference foils to align and merge\n",
    "dbpath   = os.path.join('')\n",
    "datnames = {'db'   :('Database_example_Fe.h5', 'Database_example_Fe.h5'),\n",
    "            'names':('Goethite_20K', 'Ferrihydrite_20K')}\n",
    "\n",
    "# Parameters normalization, background removal, foward fourrier transform\n",
    "k_edge = 7112\n",
    "pre_range = [-160, -40]\n",
    "post_range = [140, 950]\n",
    "nvict = 2\n",
    "nnorm = 2 \n",
    "k_range_autbk = [0, 16]\n",
    "k_range_fft = [2,14.5]\n",
    "kw = 2\n",
    "rbkg = 1\n",
    "pre_edge_kws = {'pre_range':pre_range, 'post_range': post_range, 'nvict': nvict, 'nnorm':nnorm}\n",
    "\n",
    "# Figure parameters\n",
    "fig_kws  = {'figsize'   : (20, 15.0)}  # size figure\n",
    "fig_pars = {'e_range'  : (k_edge-50, k_edge+90),\n",
    "           'e_ticks'   : [k_edge-51, k_edge-3, k_edge+44, k_edge+91],\n",
    "           'k_range'   : [-0.1,16.3],\n",
    "           'k_weight'  : kw,\n",
    "           'k_ticks'   : [0,2,4,6,8,10,12,14,16],\n",
    "           'r_range'   : [0, 8],\n",
    "           'r_ticks'   : [0,2,4,6,8],\n",
    "           'prop_cycle': [{'color'     : ['black', 'red', 'saddlebrown', 'darkorange', \n",
    "                                          'forestgreen', 'mediumturquoise', 'darkslategrey', 'darkmagenta'],\n",
    "                           'linewidth' : [1, 1, 1, 1, 1, 1, 1, 1],}\n",
    "                         ]}\n",
    "                          \n",
    "# Initializing plot axes\n",
    "fig, ax = fig_xas_template(panels = 'xd/er', fig_pars = fig_pars, **fig_kws)\n",
    "\n",
    "# Initializing report\n",
    "report = Report()\n",
    "col_names = ['Sample_name', 'e0 [eV]', 'Deriv_max','Emax [eV]', 'Rmax']\n",
    "report.set_columns(col_names)\n",
    "\n",
    "# Reading data\n",
    "for i in range(0,len(datnames['db'])):\n",
    "    data = read_hdf5(os.path.join(dbpath, datnames['db'][i]), name = datnames['names'][i])\n",
    "    e0_data = find_e0(data, method='halfedge', pre_edge_kws = pre_edge_kws, update = True)\n",
    "    pre_edge(data, e0 = e0_data, pre_range = pre_range, post_range = post_range, \n",
    "             nvict = nvict, update = True)\n",
    "    autobk(data, rbkg = rbkg, k_range = k_range_autbk, kweight = kw, win = 'kaiser', update = True)\n",
    "    xftf(data, k_range = k_range_fft, kweight = kw, update = True, win = 'kaiser')\n",
    "    \n",
    "    # Extracting maximum for mu, R, first derivative\n",
    "    mu_max_index = data.energy[argrelextrema(data.mu, np.greater, order=100)[0][0]]\n",
    "    r_max_index = data.r[argrelextrema(data.chir_mag, np.greater, order=100)[0][0]] \n",
    "    deriv_max_index = data.energy[argrelextrema(np.gradient(data.mu)/np.gradient(data.energy), np.greater, order=100)[0][0]]\n",
    "    \n",
    "    # Adding content to the report\n",
    "    report.add_row([datnames['names'][i], e0_data, deriv_max_index, mu_max_index, r_max_index])\n",
    "    \n",
    "    # Plotting spectra\n",
    "    ax[0,0].plot(data.energy, data.flat, label = datnames['names'][i])\n",
    "    ax[0,0].legend()\n",
    "    ax[0,0].axvline(mu_max_index,0,1, dashes=[3,1], color = 'black')\n",
    "    ax[0,1].plot(data.energy, np.gradient(data.mu_ref)/np.gradient(data.energy), label = datnames['names'][i] )\n",
    "    ax[0,1].axvline(deriv_max_index,0,1,  dashes=[3,1], color = 'black')\n",
    "    ax[1,0].plot(data.k, data.k**2 * data.chi, label = datnames['names'][i] )\n",
    "    ax[1,0].legend()\n",
    "    ax[1,1].plot(data.r, data.chir_mag, label = datnames['names'][i]) \n",
    "    ax[1,1].legend()\n",
    "    ax[1,1].axvline(r_max_index,0,1,  dashes=[3,1], color = 'black')\n",
    "    #fig.suptitle('Title', y=1.02, fontsize=16)\n",
    "    fig.tight_layout()\n",
    "    \n",
    "report.show()    \n",
    "plt.show(block=False)\n",
    "\n",
    "# Saving plot (optional)\n",
    "if False:\n",
    "    figpath = os.path.join('', 'Figure.pdf')\n",
    "    fig.savefig(figpath, bbox_inches='tight', dpi=300)\n",
    "    print ('Figure saved in %s' % figpath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.signal import argrelextrema\n",
    "\n",
    "from araucaria import Report\n",
    "from araucaria.io import read_hdf5\n",
    "from araucaria.xas import find_e0, pre_edge, autobk, xftf\n",
    "from araucaria.plot import fig_xas_template, fig_pre_edge\n",
    "\n",
    "# Path to the files that contain the reference foils to align and merge\n",
    "dbpath   = os.path.join('')\n",
    "datnames = {'db'   :('Database_example_Fe.h5', 'Database_example_Fe.h5'),\n",
    "            'names':('Goethite_20K', 'Ferrihydrite_20K')}\n",
    "\n",
    "# Parameters normalization, background removal, foward fourrier transform\n",
    "k_edge = 7112\n",
    "pre_range = [-150, -50]\n",
    "post_range = [150, 950]\n",
    "nvict = 2\n",
    "k_range_autbk = [0, 16]\n",
    "k_range_fft = [2.5,12.5]\n",
    "kw = 2\n",
    "rbkg = 1\n",
    "win = 'hanning'\n",
    "pre_edge_kws = {'pre_range':pre_range, 'post_range': post_range, 'nvict': nvict, 'nnorm':nnorm}\n",
    "\n",
    "# Figure parameters\n",
    "fig_kws  = {'figsize'   : (15, 6.0)}  # size figure\n",
    "steps    = [0.9, 0.15, 2.5, 1.2] \n",
    "fig_pars = {'e_range'  : (k_edge-30, k_edge+130),\n",
    "           'e_ticks'   : [k_edge-30, k_edge+10, k_edge+50, k_edge+90, k_edge+130],\n",
    "           'k_range'   : [-0.1,16.3],\n",
    "           'k_weight'  : kw,\n",
    "           'k_ticks'   : [0,2,4,6,8,10,12,14,16],\n",
    "           'r_range'   : [0, 8],\n",
    "           'r_ticks'   : [0,2,4,6,8],\n",
    "           'prop_cycle': [{'color'     : ['black', 'red', 'saddlebrown', 'darkorange', \n",
    "                                          'forestgreen', 'mediumturquoise', 'darkslategrey', 'darkmagenta'],\n",
    "                           'linewidth' : [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5],}\n",
    "                         ]}\n",
    "\n",
    "# Initializing plot axes\n",
    "fig, ax = fig_xas_template(panels = 'xder', fig_pars = fig_pars, **fig_kws)\n",
    "\n",
    "# Initializing report\n",
    "report = Report()\n",
    "col_names = ['Sample_name', 'e0 [eV]', 'Deriv_max','Emax [eV]', 'Rmax']\n",
    "report.set_columns(col_names)\n",
    "    \n",
    "# Reading data\n",
    "for i in range(0,len(datnames['db'])):\n",
    "    data = read_hdf5(os.path.join(dbpath, datnames['db'][i]), name = datnames['names'][i])\n",
    "    e0_data = find_e0(data, method='halfedge', pre_edge_kws = pre_edge_kws, update = True)\n",
    "    pre_edge(data, e0 = e0_data, pre_range = pre_range, post_range = post_range, nvict = nvict, update = True)\n",
    "    autobk(data, rbkg = rbkg, k_range = k_range_autbk, kweight = kw, win = win, update = True)\n",
    "    xftf(data, k_range = k_range_fft, kweight = kw, update = True)\n",
    "    \n",
    "    # Extracting maximum for mu, R, first derivative\n",
    "    mu_max_index = data.energy[argrelextrema(data.mu, np.greater, order=100)[0][0]]\n",
    "    r_max_index = data.r[argrelextrema(data.chir_mag, np.greater, order=100)[0][0]] \n",
    "    deriv_max_index = data.energy[argrelextrema(np.gradient(data.mu)/np.gradient(data.energy), np.greater, order=100)[0][0]]\n",
    "    \n",
    "    # Adding content to the report\n",
    "    report.add_row([datnames['names'][i], e0_data, deriv_max_index, mu_max_index, r_max_index])\n",
    "    \n",
    "    # Plotting spectra\n",
    "    ax[0].plot(data.energy, i*steps[0] + data.norm) \n",
    "    ax[0].text(7240, 1.15 + i*steps[0], s = datnames['names'][i], ha='right', fontsize=10)\n",
    "    ax[1].plot(data.energy, i*steps[1] + np.gradient(data.mu)/np.gradient(data.energy), \n",
    "                 label = datnames['names'][i])\n",
    "    ax[1].text(7240, 0.05 + i*steps[1], s = datnames['names'][i], ha='right', fontsize=10)\n",
    "    ax[2].plot(data.k, i*steps[2] + data.k**2 * data.chi, label = datnames['names'][i])\n",
    "    ax[2].text(16, 0.8 + i*steps[2], s = datnames['names'][i], ha='right', fontsize=10)\n",
    "    ax[3].plot(data.r, i*steps[3] + data.chir_mag, label = datnames['names'][i])\n",
    "    ax[3].text(7.9, 0.5 + i*steps[3], s = datnames['names'][i], ha='right', fontsize=10)\n",
    "    fig.tight_layout()\n",
    "    #fig.suptitle('Title', y=1.02, fontsize=16)\n",
    "    \n",
    "report.show()    \n",
    "plt.show(block=False)\n",
    "\n",
    "# Saving plot (optional)\n",
    "if False:\n",
    "    figpath = os.path.join('figure.pdf')\n",
    "    fig.savefig(figpath, bbox_inches='tight', dpi=300)\n",
    "    print ('Figure saved in %s' % figpath)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
